linear algebra, fourier transform, and matrices - Đại số tuyến tính
#create an array:
arr = np.array([1,2,3])
arr = np.array([1,2,3], [4,5,6], dtype = float)
arr = np.array([[(1.5,2,3), (4,5,6)],[(3,2,1), (4,5,6)]], dtype = float)


#array datatype:
np.int64
np.float32
np.complex
np.bool
np.object
np.string_
np.unicode_


#inspecting array
print(arr.shape)
print(len(arr))
print(arr.ndim)           # Số chiều trong mảng
print(arr.size)           # Số phần tử trong mảng
print(arr.dtype)          # Data type
arr.astype(np.int64)      # Ép kiểu cho mảng


#initial placeholders
np.zeros((3,4))           # Tạo mảng 3x4 0
np.ones((3,4))            # Tạo mảng 3x4 1
np.arange(a, b, c)        # Tạo mảng giá trị cách đều (c = step)
np.linspace(a, b, c)      # Tạo mảng giá trị cách đều (c = số phần tử)
np.full((2,2,), 7)        # Tạo mảng 2x2 = 7
np.empty((3,4))           # Tạo mảng trống 3x4
np.eye(2)                 # Tạo ma trận đơn vị 2x2
np.diag([1,2,3,4])        # Tạo ma trậ đường chéo chính có value
np.diag([1,2,3,4], 
k =  -2)                  # Tạo ma trậ đường chéo chính có value, dưới đường chéo chính 2 hàng


#copying arrays
arr.copy() / make a copy
print(arr.base) / Trả về None, nghĩa là không cùng địa chỉ vs arr cũ

arr.view() / make a reference
print(arr.base) / Trả về mảng ban đầu


#array manipulation
1. Transpose
i = np.transpose(arr)     # Ma trận chuyển vị
i = arr.T                 # Ma trận chuyển vị

2. Thay đổi shape
arr.reshape(2,2,-1)       # Ép theo shape -> TRỎ về MẢNG BAN ĐÂU
arr.ravel()               # Ép thành 1D   -> TRỎ về MẢNG BAN ĐÂU
arr.flatten()             # Ép thành 1D   -> TẠO MẢNG MỚI

3. Thêm/ Bỏ phần tử
arr.resize((3,4))         # Trả về mảng mới 3x4, nếu bé hơn thì cắt, nếu lớn thì thêm 0
np.append(arr1, arr2)     # Nối 2 arr/ item với nhau
np.insert(arr, loc, val)  # Insert val vào arr[loc]
np.delete(arr, loc, axis) # Axis = 0/1 xoá theo hàng/cột

4. Nối 2 arrays
np.concatenate( 
(arr1, arr2), axis)       # Nối arrays, 0/1: hàng/cột
np.vstack((a,b))          # Nối theo cột
np.hstack((a,b))          #　Nối theo hàng

5. Tách array
np.vsplit(a, n)           # Tách theo hàng
np.hsplit(a, n)           # Tách theo cột

#loop through array
//loop qua array cùng datatype
for x in np.nditer(array):
  print(x)
for x in a.ravel():
    print(x)

//loop qua array và đổi datatype
//NumPy không trực tiếp đổi datatype của elemt (trong mảng) nên cần không gian, nên để gọi vùng nhớ buffer, 
//nditer() dùng cớ flags=['buffered'].
for x in np.nditer(arr, flags = ['buffered'], os_dtypes = ['S']):
  print(x)

#search array np.where(value == a)
arr = np.array([1, 2, 3, 4, 5, 4, 4])
x = np.where(arr == 4) // trả về index của value = 4 (3, 5, 6)

#sort array np.sort(array)
arr = np.array(['banana', 'cherry', 'apple'])
print(np.sort(arr))

#filter array
1.filter_array = []
for x in arr:
  if(condition) filter_array.append("True")
  else filter_array.append("False")
new_arr = arr[filter_array]
2.filter_array = arr % 2 == 0
new_arr = arr[filter_array]

#RANDOM MODULE -> HÀM PHÂN PHỐI XÁC SUẤT
from numpy import random

random.randint(100) // 0 -> 100
random.randint(100, size = (5))
random.randint(100, size = (3,5))

#LẤY RANDOM TRONG KHOẢNG 0,1
random.rand() // float [0,1]
random.rand(5) // 1D 
raddom.rand(3, 5) // 2D

#LẤY RANDOM TRONG ARRAY
random.choice([1,2,4]) // lấy random trong 1 array
random.choice([1,2,4], size = (3,5))

#PHÂN PHỐI XÁC SUẤT
random.choice([1,2,3,4], p = [0.1, 0.2, 0.3, 0.4] ,size = (3,3))

#SINH XÂU
random.shuffle(arr) // tham chiếu 
random.permutation(arr) // tham trị

#MODULE SEABORN -> VẼ PHÂN PHỐI XÁC SUẤT -> LÀ 1 TV SỬ DỤNG MATPLOTLIB ĐỂ VẼ HÌNH
import seaborn as sns
import matplotlib.pyplot as plt

#Plotting a Displot
sns.displot(array, kde = True, label = "PLOTING") // Cả cột và line
sns.histplot(array, kde = True)  // Cả cột và line
sns.kdeplot(array) // Chỉ dùng line

#Plotting w/o histogram
sns.displot(arr)

#PHÂN PHỐI CHUẨN - GAUSS - LIÊN TỤC
phân phối của nhiều sự kiện thực tế

x = random.normal(loc=1, scale=2, size=(2, 3))
loc: trung vị - đỉnh đồ thị
scale: (Standard Deviation) đồ thị phân phối phẳng như thế nào
size: hình dáng return array

#PHÂN PHỐI NHỊ THỨC - RỜI RẠC
phân phối của 1 tình hướng chỉ có 2 khả năng n lần - tung đồng xu

x = random.binomical(p = 1 , n = 0.5, size = (10))
p : số lần thử
n : xác suất 
size : hình dáng mảng trả về

#PHÂN PHỐI POISSON - RỜI RẠC
Ước tính số lần một sự kiện có thể xảy ra trong một thời gian nhất định.
Nếu một người ăn hai lần một ngày thì xác suất người đó sẽ ăn ba lần là bao nhiêu?

random.poisson(lam=2, size=10)
lam : giá trị kì vọng xuất hiện của sự kiện trong một khoảng cho sẵn
Ví dụ, nếu một sự kiện trung bình xảy ra 1 lần trong 4 phút, 
giờ ta quan tâm số lần sự kiện xảy ra trong khoảng thời gian 10 phút, 
ta dùng mô hình phân phối Poisson với λ = 10/4 = 2.5.

#PHÂN PHỐI UNIFORM - RỜI RẠC
random.uniform(size=(2, 3))
low : lower bound - default 0 .0.
high : upper bound - default 1.0.
size :  hình dáng mảng trả về

#ufuncts - tự động tính toán trên array, không cần loop, sử dung - do nó sử dụng mã C và tính toán song song của CPU thay vì loop lần lượt
np.add(arr1, arr2) -> np.add.reduce(arr1) = np.sum(arr1) // reduce sẽ chia nhỏ arr thành từng phần tử rồi mới cộng vào
np.subtract(arr1, arr2)
np.multiply(arr1, arr2)
np.divide(arr1, arr2)
np.power(arr1, arr2)
np.mod(arr1, arr2)
newarr = np.remainder(arr1, arr2)

#Hàm lượng giác
np.sin() - np.cos() - np.cot() - np.tan() 
np.arcsin() - np.arccos() - np.arccot() - np.arctan()
np.pi
np.deg2rad()
np.rad2deg
